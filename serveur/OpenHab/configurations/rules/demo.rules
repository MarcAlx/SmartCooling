import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*

rule "Update max and min temperatures"
when
	Item Weather_Temperature changed or
	Time cron "0 0 0 * * ?" or
	System started
then	
	postUpdate(Weather_Temp_Max, Weather_Temperature.maximumSince(now.toDateMidnight).state)
	postUpdate(Weather_Temp_Min, Weather_Temperature.minimumSince(now.toDateMidnight).state)
	logInfo("Weather","Temperature evolved of " + Weather_Temperature.deltaSince(now.minusMinutes(2)).toString + " degrees.")
end

rule "Update max and min humidity values"
when
	Item Weather_Humidity changed or
	Time cron "0 0 0 * * ?" or
	System started
then	
	postUpdate(Humidity_Max, Weather_Humidity.maximumSince(now.toDateMidnight).state)
	postUpdate(Humidity_Min, Weather_Humidity.minimumSince(now.toDateMidnight).state)
	logInfo("HumidityWidget","Humidity evolved of " + Weather_Humidity.deltaSince(now.minusMinutes(2)).toString + " %.")
end

/** shows how to use sensor values from the past */
rule "Persistence Demo"
when
	Time cron "0 * * * * ?"
then	
	if(Weather_Temperature.changedSince(now.minusMinutes(1))) {
		println("2 minutes ago, the temperature was " + Weather_Temperature.historicState(now.minusMinutes(2)) + " degrees.")		
	}
	if(Weather_Humidity.changedSince(now.minusMinutes(1))) {
		println("2 minutes ago, the humidity was " + Weather_Humidity.historicState(now.minusMinutes(2)) + " degrees.")		
	}

end


// Creates an item that stores the last update time of this item
rule "Records last weather update time"
when
  Item Weather_Temperature received update
then
  postUpdate(Weather_LastUpdate, new DateTimeType())
end

rule "Records last humidity update time"
when
  Item Weather_Humidity received update
then
  postUpdate(Humidity_LastUpdate, new DateTimeType())
end

rule "Fan command"
when
  Item Presence received update or 
  Item Weather_Temperature received update  
then
	if(Presence.state.toString.equals("HIGH")){
		sendCommand(Fan2, 0)
		if(Weather_Temperature.state <= 22){
			sendCommand(Fan2, 0)
		}
		else if(Weather_Temperature.state >22 && Weather_Temperature.state <=25){
			sendCommand(Fan2, 1)
		}
		else {
			sendCommand(Fan2, 2)
		}
	}
	else{
		  sendCommand(Fan2, 0)
	}
end

// This rule will be used to test Scale transformation service
rule "Compute humidex"
when Item Weather_Temperature changed or
	 Item Weather_Humidity changed 
then
	var Number T = Weather_Temperature.state as DecimalType
	var Number H = Weather_Humidity.state as DecimalType	
	var Number x = 7.5 * T/(237.7 + T)
	var Number e = 6.112 * Math::pow(10, x.doubleValue) * H/100
	var Number humidex = T + (new Double(5) / new Double(9)) * (e - 10)
	Weather_Humidex.postUpdate(humidex)
end
